package com.example.accessingdatamysql;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class MainController {

	@Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@PostMapping(path = "/greeting") // Map ONLY POST Requests
	public String addNewUser(@RequestParam String name, @RequestParam String email, @RequestParam String mob,
			@RequestParam String doj, @RequestParam String panCard, @RequestParam String adharCard,
			@RequestParam String id, Model model) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		int idNum = Integer.parseInt(id);
		n.setId(idNum);
		n.setName(name);
		n.setEmail(email);
		n.setMob(mob);
		n.setDoj(doj);
		n.setAdharCard(panCard);
		n.setPanCard(adharCard);

		userRepository.save(n);
		model.addAttribute("reqHTML", mob);
		return "result";
	}

	@GetMapping(path = "/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// public String getAllUsers() {
		// This returns a JSON or XML with the users
		// String results = userRepository.findAll().toString();
		return userRepository.findAll();
		// return "result";
	}

	@GetMapping(path = "/greeting")
	public String greetingForm(Model model) {
		model.addAttribute("user", new User());
		return "greeting";
	}

	@GetMapping(path = "/list")
	public String listUsers(Model model) {
		User n = new User();
		// String results = userRepository.findAll().toString();
		// return userRepository.findAll();
		ArrayList jsonObj = (ArrayList) userRepository.findAll();
		model.addAttribute("usersList", jsonObj);
		return "result";
	}

	@GetMapping(path = "/userdetails")
	public String userDetails(@RequestParam int id, Model model) {
		User n = new User();
		// String results = userRepository.findAll().toString();
		// return userRepository.findAll();
		Optional<User> userData = userRepository.findById(id);
		User currentUser = userData.get();
		model.addAttribute("usersDetails", currentUser);
		return "userdetails";
	}

	@GetMapping(path = "/updateprofile")
	public String updateProfile(@RequestParam int id, Model model) {
		model.addAttribute("user", new User());
		Optional<User> userData = userRepository.findById(id);
		User currentUser = userData.get();
		model.addAttribute("usersDetails", currentUser);
		return "updateprofile";
	}

	@PostMapping(path = "/updateprofile")
	public String updateProfilePost(@ModelAttribute User userFrmReq, @RequestParam("image") MultipartFile file,
			Model model) {
		System.out.println("From the request object userFrmReq : getUserAddress " + userFrmReq.getUserAddress());

		String uploadDirPath = "/Users/santoshvadakattu/Downloads/spring-boot-apps/gs-accessing-data-mysql-main/complete/src/main/resources/static/images";
		StringBuilder fileNames = new StringBuilder();
		Path fileNameAndPath = Paths.get(uploadDirPath, file.getOriginalFilename());
		String fileAbsPath = uploadDirPath + "/" + file.getOriginalFilename();
		System.out.println("fileAbsPath is : " + fileAbsPath);
		fileNames.append(file.getOriginalFilename());
		try {
			System.out.println("storing the file location : " + uploadDirPath);
			Files.write(fileNameAndPath, file.getBytes());
		} catch (IOException e) {
			e.printStackTrace();
			System.err.printf("Exception caught in file storing : ", e);
		}

		User n = new User();
		n.setId(userFrmReq.getId());
		n.setName(userFrmReq.getName());
		n.setEmail(userFrmReq.getEmail());
		n.setMob(userFrmReq.getMob());
		n.setDoj(userFrmReq.getDoj());
		n.setAdharCard(userFrmReq.getAdharCard());
		n.setPanCard(userFrmReq.getPanCard());
		n.setUserAddress(userFrmReq.getUserAddress());
		n.setImagePath(fileAbsPath);

		userRepository.save(n);

		Optional<User> userData = userRepository.findById(userFrmReq.getId());
		User currentUser = userData.get();
		model.addAttribute("usersDetails", currentUser);
		return "userdetails";
	}

}
